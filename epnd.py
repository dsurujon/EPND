import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from pylab import *
import array
import SCAtransposed as SCA

N=3
fbxa="TTCCAATTTCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAATATTAAATTAATTTAAATAAATTTTATTAAAAAAAACAAAGAAATATATTAAAAAAATAAAAATAAAAATAAAAAATAAAAAATAAAAAATAAAAAATAAAAAAAAAAGATATATAATATATATATATATAATAATATATAAATATAGAAATAAAAAAAGGTAGAACACATACATTCACCCTTTAAACACCCCACCCCACTTTCGAGCTCAAAAACCATATTTTTTTTTTTTAATTAATTATTATTATTTTTATTTTTATATTTTATTTTTATTTATTTTATTTTATTTTATTTTTATATTTTTTTTTTTTTTTTTTTTTTTAAAAAGAAAAAAAAAAAATAAAAAAAAAACAGCTTGATTTTTTTTTTTAATTTGTCTATTCAAAATTTTTTTTCAATTAACACATCGTGTCCTTTTGTGATTCATAATCATATCATCATTTTTTTTTTTTTATAAAAAAAATCTTTTAATAAGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTATAATTATTTAAAATCATTTATTTAATTTTTTTTATTTTTTTTTATTTCTCATTTTAACCACACTTCACACTAAACCACTAGTTTTGTATTTTTAAAATTATTTTTTACGTAAATAGAAATTTTATTATATTAATTCAATTACATATAAAGCAATTATAAATAATTTTTTTTAGGTTTCAATTTAATATATATTTATATATATATTAAAAATATATATATTTTTTTTTGCCAATCCTTTTTTTTTCTTATAAATTTTATATTTACAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGGTCGATATTTTTTTTTTGATCAATTAAGCAATTCCATAACTTTTAAAATCAATTTTTTAAAAAAATAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGTAATCACAAATAG"
#noncoding sequence

rdea="ATGATCTCGGATTACGAAGGACCAACACCAACTAAAAAATTTGATCAAGATATATTATTTGATTACTCTGAAGGTGAAAAGGAATTTACTTTTGAACTTTTAGATTCATATATTTCATCAGTAGAAGAACATTTACCAGAGTTATTGAATTCATTTGAAGCAAAAGATTTAAAGGGTGCAGTACTTCATTCTCATGATATTAAAGGTTCATCAAGTTATATTGGTTGCGAAGCTGTGAGATATGTTAGTGGTAAGATAGAGGCATATTGTAAAAATGATGAATTAGAAAAAGCAGAATCATTTTATCCAGAATTAAAGAAAGAAGTTGAAGAAGTATTTAAAATTTTAAGTGATTTTAAGAAAAATTGGGATAAAAATCATGGTGAAGGTGGTAGTGATGATGGTGGTGATGATAATGAAAGTGAACCAACTGAAAACAATAATAATGATGGTAGTAGTGTAAATAATAATGATAGTAGTAGCGGTGGTGGTGGTAAAGACATAGAAAATAAAAACACAGATGAAAATACTGGAAAGAATCTAAACGAAAGATCTAAATCACCAGTACCCTTACAAACAACATTAAAACCAGTAACTATTGAAACACCCAAAACTGCTTCTGATAAAATTGCAACCGAAACTCCAACTTCTTTAGCTAATAATACCAATAGTAGCAGCAACAATAACAGTAAAAATGAAAATGGTTTAAATAGTAAACAACCTCAAACTTCTTCAAATTCACCAACAAAAATTCAAACAA"
#coding sequence
def codon_usage(seq,cods,i):
    if i%3==0:
        if seq[i]=="A":cods[0][0]+=1
        if seq[i]=="T":cods[1][0]+=1
        if seq[i]=="C":cods[2][0]+=1
        if seq[i]=="G":cods[3][0]+=1
    if i%3==1:
        if seq[i]=="A":cods[0][1]+=1
        if seq[i]=="T":cods[1][1]+=1
        if seq[i]=="C":cods[2][1]+=1
        if seq[i]=="G":cods[3][1]+=1
    if i%3==2:
        if seq[i]=="A":cods[0][2]+=1
        if seq[i]=="T":cods[1][2]+=1
        if seq[i]=="C":cods[2][2]+=1
        if seq[i]=="G":cods[3][2]+=1
    return cods
def dna_walk(seq):
    cod=[[0,0,0] for i in range(0,4)]
    sns=[]
    for i in range(0, len(seq)):
        ncods=codon_usage(seq,cod,i)
        freqs=np.array(ncods)
        ps=sum(freqs[p][0]**2+freqs[p][1]**2+freqs[p][2]**2-(freqs[p][0]*freqs[p][1]+freqs[p][1]*freqs[p][2]+freqs[p][0]*freqs[p][2]) for p in range(0,4))
        sn=ps/float(i+1)
        sns.append(sn)
    return sns

sn_=dna_walk(rdea)
sn_f=dna_walk(fbxa)
slps=[0 for i in range(0,50)]

plt.plot(sn_,'k',sn_f,'r')
plt.title("DNA walk on coding and non-coding sequences")
plt.xlabel("position")
plt.ylabel("signal to noise")
plt.legend(["rdeA (coding)","fbxA (noncoding)"],loc=7)

plt.show()
